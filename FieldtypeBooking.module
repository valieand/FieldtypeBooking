<?php

/**
 * FieldtypeBooking for ProcessWire.
 *
 * ProcessWire Fieldtype for a simple 2-week booking calendar with predefined time slots
 * Start date defaults to today and time slots are for 2 hours each, 9am-9pm
 *
 *
 * @author Kongondo <kongondo@gmail.com>
 * @sponsored by Andrey Valiev
 *
 *
 * Lincensed under GNU/GPL v2.
 *
 * https://github.com/kongondo/FieldtypeBooking
 * Created September 2015
 *
 * ProcessWire 2.x
 * Copyright (C) 2015 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 *
 */

class FieldtypeBooking extends Fieldtype
{
	public static function getModuleInfo()
    {
		return array(
            'title'   => 'Booking',
            'version' => 001,
            'href'    => 'https://processwire.com/talk/topic/',
            'summary' => 'Simple custom Ajax-driven 2-week booking calendar with pre-defined date-time slots.',
            'author'  => 'Kongondo',
		);
	}

	public function init()
    {
        $class_name = 'Booking.class.php';
        require_once(dirname(__FILE__) . '/' . $class_name);

		parent::init();
	}

	/**
	 * Return the required Inputfield used to populate a field of this type
	 *
	 */
	public function getInputfield(Page $page, Field $field)
    {
		$inputfield = $this->modules->get("InputfieldBooking");

		#send variables to InputfieldBooking

		//our default OR custom Date/Time Format
		$inputfield->set('dateFormat', $field->dateFormat ? $field->dateFormat : 'd F Y H:i');
		//URL to page handling the ajax call. This can be internal or external. see ajaxURL() in IntpufieldBooking
		$inputfield->set('ajaxURL', $field->ajaxURL);

		return $inputfield;
	}

	/**
	 * Return a blank ready-to-populate version of a field of this type
	 *
	 */
	public function getBlankValue(Page $page, Field $field)
    {
		$booking = new Booking($page);
		$booking->setTrackChanges(true);

		return $booking;
	}

	/**
	 * set the config option fields for this Field
	 * These appear in the 'Details' Tab when editing an instance of this Field
	 */
	public function ___getConfigInputfields(Field $field)
    {
		$inputfields = parent::___getConfigInputfields($field);

		//text field for specifying valid PHP date format
		//Note that PHP can get confused between American vs European date formats, e.g. what date is 9-11-12?!!!
		$f = $this->modules->get("InputfieldText");
		$f->attr('name', 'dateFormat');
		$f->attr('value', $field->dateFormat ? $field->dateFormat : 'd F Y H:i');
		$f->label = $this->_('Date/Time Format Code');
		$f->description .= $this->_('This will be used to correctly convert and output booking dates and times. See the [PHP date](http://www.php.net/manual/en/function.date.php) function reference for more information on how to customize this format.');
		$f->notes = $this->_('Default format is: d F Y H:i. That would give, for example, 10 October 2015 19:00. Note that both date and time have to be specified. For 12-hour format, also indicate am/pm to avoid unexpected results.');

		$inputfields->append($f);

		//text field for getting/specifying URL that will be used to handle this InputfieldBooking ajax calls
		$f = $this->modules->get("InputfieldText");
		$f->attr('name', 'ajaxURL');
		$f->attr('value', $field->ajaxURL);
		$f->label = $this->_('Ajax Handler Page');
		$f->description .= $this->_('ID or template or URL for internal ProcessWire page or external URL that will handle InputfieldBooking\'s Ajax Calls.');
		$f->notes = $this->_('Example: 1234, http://www.domain.com/booking.php, https://www.domain.com/booking.php, http://domain.com, https://domain.com, www.domain.com/booking.php, domain.com, booking, /mysite/cal-ajax/. Note that for external URLs you will need to implement your own Cross-origin resource sharing in InputfieldBooking.js.');

		$inputfields->append($f);

		return $inputfields;
	}

	/**
	 * Format a value for output, called when a Page's outputFormatting is on
	 *
	 */
	public function formatValue(Page $page, Field $field, $value)
    {
		$b = new Booking();
		//the data in $value is already sanitized in sanitizeValue()
		//if the page's output formatting is on, then we'll return sanitized ready-for-output values
		if(wire('page') && wire('page')->of()) 	$value->date = $b->convertDate($value->date, $field->dateFormat);

		//if no user booked yet, give feedback
		if(!$value->user) $value->user = $this->_('No user found');

		//####### DUMMY DATA OF AVAIALABLE USERS AT THE CURRENT TIMESLOT ############
		$value->users = $b->getUsers();//@@note: without timestamp as arg 1 will just return empty array

		//####### DUMMY DATA OF 2 week calendar ############
		$value->calendar = $b->getCalendar();//returns an array in the form array [0] => array ($datetime => $busyFree)

		return $value;
	}

	/**
	 * Given a value, make it clean for storage within a Page
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value)
    {
		//if given a blank value, return a valid blank value
		if(empty($value)) return $this->getBlankValue($page, $field, $value);

		//if given something other than an instance of Booking, throw an error
		if(!$value instanceof Booking) {
			throw new WireException("Value set to field '$field->name' must be a Booking");
		}

		//we already sanitized our values from retrieved data from the db in ___wakeupValue() and those sent to ___sleepValue()
		//so nothing else to do here

		return $value;
	}

	/**
     * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
 	 *
     * @param Page $page
     * @param Field $field
     * @param string|int|array $value
     * @access public
     * @return string|int|array|object $value
     *
     */
	public function ___wakeupValue(Page $page, Field $field, $value)
    {
		//if for some reason we already get a valid value, then just return it
		if($value instanceof Booking) return $value;

		//start a blank value to be populated. this is just a normal php array
		$lastBooking = $this->getBlankValue($page, $field);

		//if we were given a blank value, then we've got nothing to do: just return a blank booking
		if(empty($value) || !is_array($value)) return $lastBooking;

       	//create a new properties from each the saved datetime/user pair in the db
		$lastBooking->date = (int) $value['data'];//note: we are converting 'data' to 'booking->date'
		$lastBooking->user = $this->sanitizer->text($value['booking_user']);//note: converting 'booking_user' to 'booking->user'
		$lastBooking->setTrackChanges(true);//track changes for the booking

		return $lastBooking;
	}

	/**
     * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
     *
     * @param Page $page
     * @param Field $field
     * @param string|int|array|object $value
     * @access public
     * @return string|int
     *
     */
	public function ___sleepValue(Page $page, Field $field, $value)
    {
		$sleepValue = array();

		//if we are given something other than an Booking,
		//then just return a blank array
		if(!$value instanceof Booking) return $sleepValue;

		$sleepValue = array(
            'data'         => (int) $value->date, //raw timestamp
            'booking_user' => $this->sanitizer->text($value->user), //user name
		);

		return $sleepValue;
	}

	/**
	 * Return the database schema that defines a booking item
	 *
	 */
	public function getDatabaseSchema(Field $field)
    {
		$schema = parent::getDatabaseSchema($field);

		//'data' is a required field for any Fieldtype, and we're using it to represent our 'booking->date' field (column in db)
		#$schema['data'] = "INT NOT NULL";//we reuse this required field/column for booking->date
		$schema['data'] = 'INT NOT NULL';//we reuse this required field/column for booking->date
		$schema['booking_user'] = "VARCHAR(255) NOT NULL";//we store the user name here (these are not ProcessWire users!)

		//indexes, for any fields that need to be searchable from selectors
		//make both our fields searchable
		$schema['keys']['data'] = 'KEY data(data)';//searchable date = page->booking->date = date of booking for this user
		#$schema['keys']['booking_user'] = 'KEY booking_user(booking_user)';//searchable cc = $page->booking->user = id of user
		$schema['keys']['booking_user'] = 'FULLTEXT KEY `booking_user` (`booking_user`)';//searchable cc = $page->booking->user = id of user

		return $schema;
	}

	/**
	 * Method called when the field is database-queried from a selector
	 *
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value)
    {
		//if we get a relative/string time, convert to a timestamp
		if($subfield == 'date' && !ctype_digit('$value')) $value = strtotime($value);

		//If searching 'row' then assume our default (data) field
		if($subfield == 'date') $subfield = 'data';//If searching 'date' then assume our default (data) field
		if($subfield == 'user') $subfield = 'booking_user';//If searching 'user' then assume booking_user

		/*
			- MySQL knows what "=" and ">" are, but it doesn't know what "%=", "~=", "^=" OR "$=" are
			- the latter allow for finer search
		*/

		//if normal sql characters, do 'normal' query, else do fulltext search
		if($this->wire('database')->isOperator($operator))
        {
			return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
		}

		else
        {
			$ft = new DatabaseQuerySelectFulltext($query);
			$ft->match($table, $subfield, $operator, $value);

			return $query;
		}
	}
}
